name: echo-issue-to-pr

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  to-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Guard - only run for 'echo' label
        if: ${{ contains(github.event.issue.labels.*.name, 'echo') }}
        run: echo "echo label present"

      - name: Check out
        if: ${{ contains(github.event.issue.labels.*.name, 'echo') }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare ids and paths
        if: ${{ contains(github.event.issue.labels.*.name, 'echo') }}
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          TITLE="${{ github.event.issue.title }}"
          # slugify title
          SLUG=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g;s/^-+|-+$//g')
          mkdir -p echoes
          COUNT=$(ls -1 echoes 2>/dev/null | grep -E '^[0-9]{4}-' | wc -l | xargs || true)
          printf -v ID "%04d" $((COUNT+1))
          FILE="echoes/${ID}-${SLUG}.md"
          YEAR=$(date +%Y)
          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "slug=$SLUG"   >> "$GITHUB_OUTPUT"
          echo "id=$ID"       >> "$GITHUB_OUTPUT"
          echo "year=$YEAR"   >> "$GITHUB_OUTPUT"
          echo "file=$FILE"   >> "$GITHUB_OUTPUT"

      - name: Determine author identity (no-reply)
        if: ${{ contains(github.event.issue.labels.*.name, 'echo') }}
        id: author
        shell: bash
        run: |
          set -euo pipefail
          LOGIN='${{ github.event.issue.user.login }}'
          IDNUM='${{ github.event.issue.user.id }}'
          EMAIL="${IDNUM}+${LOGIN}@users.noreply.github.com"
          echo "name=$LOGIN"  >> "$GITHUB_OUTPUT"
          echo "email=$EMAIL" >> "$GITHUB_OUTPUT"

      - name: Create branch and write markdown
        if: ${{ contains(github.event.issue.labels.*.name, 'echo') }}
        shell: bash
        env:
          GH_REPO: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          TITLE: ${{ steps.prep.outputs.title }}
          SLUG:  ${{ steps.prep.outputs.slug }}
          ID:    ${{ steps.prep.outputs.id }}
          YEAR:  ${{ steps.prep.outputs.year }}
          FILE:  ${{ steps.prep.outputs.file }}
          AUTHOR_NAME:  ${{ steps.author.outputs.name }}
          AUTHOR_EMAIL: ${{ steps.author.outputs.email }}
        run: |
          set -euo pipefail
          BR="echo/${SLUG}-${ID}"
          git switch -c "$BR"

          # fetch issue body safely via gh api
          BODY=$(gh api "repos/$GH_REPO/issues/$ISSUE_NUMBER" --jq .body)
          CREATED=$(date +%F)
          AUTHOR="${AUTHOR_NAME}"

          # write the markdown file (no heredocs with YAML-like markers)
          printf "# %s\n\n" "$TITLE" > "$FILE"
          printf "**Echo ID:** %s\n" "$ID" >> "$FILE"
          printf "**Year:** %s\n" "$YEAR" >> "$FILE"
          printf "**Created:** %s\n" "$CREATED" >> "$FILE"
          printf "**Author:** @%s\n\n" "$AUTHOR" >> "$FILE"
          printf "## Details\n\n" >> "$FILE"
          printf "%s\n" "${BODY:-_No details provided._}" >> "$FILE"

          git add "$FILE"

          # commit as the submitter (author & committer)
          git config user.name  "$AUTHOR_NAME"
          git config user.email "$AUTHOR_EMAIL"
          git commit --author="$AUTHOR_NAME <$AUTHOR_EMAIL>" -m "echo(${ID}): ${TITLE}"

          git push -u origin "$BR"

      - name: Open PR
        if: ${{ contains(github.event.issue.labels.*.name, 'echo') }}
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TITLE: ${{ steps.prep.outputs.title }}
          ID:    ${{ steps.prep.outputs.id }}
          HEAD:  ${{ format('echo/{0}-{1}', steps.prep.outputs.slug, steps.prep.outputs.id) }}
        run: |
          set -euo pipefail
          gh pr create \
            --base main \
            --head "$HEAD" \
            --title "Echo: $ID - $TITLE" \
            --body "Auto-generated from issue #${{ github.event.issue.number }} by @${{ github.event.issue.user.login }}"
